#!/bin/bash
### BEGIN INIT INFO
# Provides:          plexconnect
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: This is the Plex Connect daemon
# Description:       This script starts PlexConnect in debian
### END INIT INFO
. /lib/lsb/init-functions
NAME=PlexConnect
INSTDIR="/opt/PlexConnect"
DAEMON="$INSTDIR/PlexConnect.py"
DAEMON_OPTS="2>&1 >/dev/null"
DAEMON_USER="root"
PIDFILE=/var/run/PlexConnect.pid
test -x "$DAEMON" || exit 5
case $1 in
        start)
                if [ -e $PIDFILE ]; then
                        status_of_proc -p $PIDFILE "$DAEMON $DAEMON_OPTS" "$NAME process" && status="0" || status="$?"
                        if [ $? = "0" ]; then
                                log_success_msg "Starting the process $NAME"
                                exit # Exit
                        fi
                fi
                # Start the daemon.
                # Start the daemon with the help of start-stop-daemon
                # Log the message appropriately
                if start-stop-daemon --start --quiet --oknodo --background --make-pidfile --pidfile $PIDFILE --startas $DAEMON -p $PIDFILE -- ${DAEMON_OPTS}; then
                        log_success_msg "Starting the process $NAME"
                else
                        log_failure_msg "Starting the process $NAME"
                fi
                ;;
        stop)
                # Stop the daemon.
                if [ -e $PIDFILE ]; then
                        status_of_proc -p $PIDFILE "$DAEMON DAEMON_OPTS" "Stoppping the $NAME process" && status="0" || status="$?"
                        if [ "$?" = 0 ]; then
                                start-stop-daemon --stop --signal 2 --quiet --oknodo --pidfile $PIDFILE && /bin/rm $PIDFILE
                                log_success_msg ""Stopping the $NAME process""
                        fi
                else
                        log_failure_msg "$NAME process is not running"
                fi
                ;;
        restart)
                # Restart the daemon.
                $0 stop && sleep 2 && $0 start
                ;;
        status)
                # Check the status of the process.
                if [ -e $PIDFILE ]; then
                        status_of_proc -p $PIDFILE "$DAEMON $DAEMON_OPTS" "$NAME process" && exit 0 || exit $?
                        log_success_msg "$NAME process is running"
                else
                        log_failure_msg "$NAME process is not running"
                fi
                ;;
        reload)
                $0 restart
                ;;
        *)
                # For invalid arguments, print the usage message.
                echo "Usage: $0 {start|stop|restart|reload|status}"
                exit 2
                ;;
esac
